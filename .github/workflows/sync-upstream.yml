
name: Sync upstream

on:
  schedule:
    - cron: '0 2 * * *'   # daily at 02:00 UTC
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check for PAT token
        id: check_token
        run: |
          if [ -z "${{ secrets.PAT_TOKEN }}" ]; then
            echo "⚠️ PAT_TOKEN secret is not set. This workflow requires a Personal Access Token with 'workflow' scope."
            echo "has_pat=false" >> $GITHUB_OUTPUT
          else
            echo "✅ PAT_TOKEN is configured"
            echo "has_pat=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        if: steps.check_token.outputs.has_pat == 'true'
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}
          persist-credentials: true

      - name: Add upstream and fetch
        if: steps.check_token.outputs.has_pat == 'true'
        run: |
          # Configure git to use the PAT token
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Update origin remote to use PAT token
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Add upstream remote
          git remote add upstream https://github.com/nautechsystems/nautilus_trader.git || true
          
          # fetch all branches and tags from upstream and origin
          git fetch origin --prune
          git fetch upstream --prune --tags

      - name: Create sync branch from upstream/develop
        if: steps.check_token.outputs.has_pat == 'true'
        run: |
          # Create a sync branch based on upstream/develop
          SYNC_BRANCH="sync/upstream-${{ github.run_id }}"
          git checkout -b "$SYNC_BRANCH" upstream/develop
          
          # Push sync branch to origin
          git push origin "$SYNC_BRANCH" || {
            echo "Push failed, retrying in 2s..."
            sleep 2
            git push origin "$SYNC_BRANCH"
          }
          
          echo "Sync branch $SYNC_BRANCH created and pushed."

      - name: Check if sync branch is ahead of develop
        if: steps.check_token.outputs.has_pat == 'true'
        id: check_ahead
        run: |
          git fetch origin develop:refs/remotes/origin/develop || true
          SYNC_BRANCH=sync/upstream-${{ github.run_id }}
          # Count commits sync branch is ahead of develop
          AHEAD=$(git rev-list --left-right --count origin/develop...$SYNC_BRANCH | awk '{print $2}')
          echo "ahead=$AHEAD" >> $GITHUB_OUTPUT
          echo "Sync branch is $AHEAD commits ahead of develop"

      - name: Validate sync
        if: steps.check_token.outputs.has_pat == 'true'
        run: |
          # Simple validation - check that we're on the sync branch
          echo "Current branch: $(git branch --show-current)"
          echo "Sync completed successfully"

      - name: Create PR
        if: steps.check_token.outputs.has_pat == 'true' && steps.check_ahead.outputs.ahead != '0'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          base: develop
          branch: sync/upstream-${{ github.run_id }}
          title: "chore: sync from upstream nautechsystems/nautilus_trader @ ${{ github.run_id }}"
          body: |
            Automated sync from upstream nautechsystems/nautilus_trader.

      - name: Setup instructions
        if: steps.check_token.outputs.has_pat == 'false'
        run: |
          echo "::error::PAT_TOKEN secret is not configured. Please follow these steps:"
          echo ""
          echo "1. Go to GitHub Settings → Developer settings → Personal access tokens → Tokens (classic)"
          echo "2. Click 'Generate new token (classic)'"
          echo "3. Give it a name like 'Sync Upstream Workflow'"
          echo "4. Select the 'workflow' scope (this allows updating workflow files)"
          echo "5. Click 'Generate token' and copy the token"
          echo "6. Go to your repository Settings → Secrets and variables → Actions"
          echo "7. Click 'New repository secret'"
          echo "8. Name it 'PAT_TOKEN' and paste your token"
          echo "9. Click 'Add secret'"
          echo ""
          echo "After adding the secret, re-run this workflow."
          exit 1
